class Tests
  #dummy
  try_nothing: ->
    tron.info( 'a dummy try function' )
  
  ###
  #try creating and updating a post.
  try_server_post: ->

    #a workaround for the 'cant find _id of undefined' bug
    #which shows up sometimes while calling Meteor.uuid
    user1 = Users.insert(
      'email': 'try1@tron.server'
      experience: {}
    ) 
    user2 = Users.insert(
      'email': 'try2@tron.server'
      experience: {}
    )
    
    #create a post
    post_id = Posts.insert( {'content': 'generated by try server post'} )
    client_post = new ClientPost( Posts.findOne( post_id ) ) 
    #add a tag
    client_post.my_tags = { '_gen' : 1 }
    server_post = new ServerPost( client_post )
    #change the user id of the tag
    server_post.tags['_gen'].users = [user1]      #TODO not guranteed to be different user.
    #and tag it again. this should cause the tag to graduate.
    client_post = new ClientPost( server_post )
    client_post.my_tags = { '_gen' : 1 }
    console.log server_post
  ###
  
  #check if a tag/user_id exists for a given post
  check_add_tag: (server_post, tag, user_id) ->
    tron.log 'check_add_tag'
    if false
      throw 'check_add_tag manual fail'
    #check if tag is present for post
    unless server_post.tags[tag]?
      throw( 'tag not present in post' )
    #check that the tag object has the user_id in users[]
    unless user_id in server_post.tags[tag].users
      throw( 'user not listed for tag.' )
  
  #check if user has exp for a tag
  check_if_user_exp: (user_id, tag, previous_exp) ->
    #tron.log 'check_if_user_exp'
    tron_user = Users.findOne( user_id )
    if false
      throw 'check if user exp, manual error'
    unless tron_user.experience[tag]?
      throw( 'tag not listed in users exp' )
    unless tron_user.experience[tag] > previous_exp
      throw( 'user expected to gain points for tag' )
  
  #check if a post inserted properly - works
  check_post_insert: ( id, expected_content ) ->
    tron.log 'check_post_insert'
    post = Posts.findOne({'_id': id, 'content': expected_content})
    unless post?
      throw( 'post not found in mongo' )
  
tron.test( new Tests() )