class ClientTests
  
  #insert new post - not tested for client
  try_client_insert_post: ->
    content = "This post generated by try client insert post"
    post_id = Posts.insert(
      'content': content
      'parent_id': null
      'instance_id': null
      'tags': {
        'gen_by_try_insert_post': 1
        }
      'votes': {
        'up': {
          'users': []
          'weight': 0
        }
        'down': {
          'users': []
          'weight': 0
        }
      }
    )
    #tron.log('Inserting randomized post with content:\n', content)
    #hits check_post_insert in the server side.
    #TODO remove the post
  
  #try to insert a tag
  try_client_insert_tag: ->
    post_id = Posts.findOne()._id
    q = {'$set': {}}
    tag_text = 'gen_by_client_try_insert_tag'
    q['$set']["my_tags.#{tag_text}"] = 1
    Posts.update({ '_id': post_id}, q)
    #hits check_add_tag on server side.
    
  

  #try to update a tag
  try_client_update_tag: ->
    #tron.log 'try_client_update_tag'
    #find a post with tag
    post = {}
    cur = Posts.find()
    cur.forEach(
      (p) ->
        if _.keys(p.tags).length > 0
          post = p
    )
    #tag it as a different user
      #this should also graduate the tag until the graduation function is updated.
    tag = _.keys(post.tags)[0]
    q = {'$set': {}}
    q['$set']["my_tags.#{tag}"] = 1
    Posts.update({'_id': post._id}, q)
    #check_add_tag should be hit by this.
    #TODO remove tag at the end.
    #TODO this is not truly using a different user id, 
    
  ###
  #try to gain points from tagging
  try_client_gain_points: ->
    tron.info( 'coming soon' )
    #TODO find a tag that has exactly one user listed, that is not me.
    cur = Posts.find()
    #TODO the cursor has posts inserted above, nothing else.
    cur.forEach(
      (p) ->
        tron.error p
    )
    tron.error Posts.find().fetch()
    #TODO tag
    #TODO check_if_user_exp should be hit by this.
  ###

tron.test( new ClientTests() )