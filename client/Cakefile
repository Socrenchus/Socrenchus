fs = require 'fs'

util = require 'util'
{spawn} = require 'child_process'

outputJSFolder = 'static/lib'
outputImageFolder = 'static/images'

imageSrcFolders = [
    'tagbox/images'
    'votebox/images'
    'omnipost/images'
    'notify/images'
]

cssSrcFolders = [
    'tagbox/stylesheets'
    'votebox/stylesheets'
    'omnipost/stylesheets'
    'notify/stylesheets'
]
srcWatchFolders = [
    './'
    'tagbox'
    'votebox'
    'omnipost'
    'notify'
]

srcFolders = [
    'main'
    'main_test'
    'tagbox'
    'votebox'
    'omnipost'
    'notify'
]

prodCoffeeFiles = [
    'main'
    'jquery.ui.tagbox'
    'jquery.ui.votebox'
    'jquery.ui.omnipost'
    'jquery.ui.notifybox'
]
  
clientTest = (callback) ->
  jasminetest = spawn 'jasmine-node', ['--coffee', '--verbose', 'spec']
  jasminetest.stderr.on 'data', (data) ->
    process.stderr.write data.toString()
  jasminetest.stdout.on 'data', (data) ->
    util.log data.toString()
  jasminetest.on 'exit', (code) ->
    callback?() if code is 0

build = (callback) ->
  for folder in srcFolders
    coffee = spawn 'coffee', ['-c', '-o', outputJSFolder, folder]
    coffee.stderr.on 'data', (data) ->
      process.stderr.write data.toString()
    coffee.stdout.on 'data', (data) ->
      util.log data.toString()
    coffee.on 'exit', (code) ->
      callback?() if code is 0

copyWithDirectory = (path,output) ->
  files = fs.readdirSync(path)
  for i in files
    currentFile = path + '/' + i
    stats = fs.statSync(currentFile)
    if stats.isFile()
      cpy = spawn 'cp', [currentFile, output]
      cpy.stderr.on 'data', (data) ->
        process.stderr.write data.toString()
      cpy.stdout.on 'data', (data) ->
        util.log data.toString()
    else if stats.isDirectory()
      copyWithDirectory(currentFile)

getFiles = (path, files) ->
  files = fs.readdirSync(path)
  for i in files
    currentFile = path + '/' + i
    stats = fs.statSync(currentFile)
    if stats.isFile()
      files.push(currentFile)
    else if stats.isDirectory()
      getCssFiles(currentFile, files)
  return files

task 'build', 'Build to static/lib from tagbox, votebox, and omnipost', ->
  build()

task 'cpimgs', 'Copy all images from the respective images folders in tagbox, votebox, and omnipost into static folder', ->
  for imgSrcFolder in imageSrcFolders  
    copyWithDirectory(imgSrcFolder, outputImageFolder)      

task 'cpcss', 'Copy all css files from the respective folders in tagbox, votebox, and omnipost into static/lib folder', ->
  for cssSrcFolder in cssSrcFolders  
    copyWithDirectory(cssSrcFolder, outputJSFolder) 

task 'watch', 'Watch for changes in tagbox, votebox, and omnipost, and if there are, build it to static/lib', ->

  invoke 'build'
  for folder in srcWatchFolders
    util.log "Watching for changes in #{folder}"
    for file in prodCoffeeFiles then do (file) ->
        fs.watchFile "#{folder}/#{file}.coffee", (curr, prev) ->
            if +curr.mtime isnt +prev.mtime
                util.log "Saw change in #{file}.coffee"
                invoke 'build'

  
  invoke 'cpcss'
  for folder in cssSrcFolders
    util.log "Watching for changes in #{folder}"
    cssFiles = getFiles(folder, [])
    for file in cssFiles then do (file) ->
        fs.watchFile "#{file}", (curr, prev) ->
            if +curr.mtime isnt +prev.mtime
                util.log "Saw change in #{file}"
                invoke 'cpcss'

  invoke 'cpimgs'
  for folder in imageSrcFolders
    util.log "Watching for changes in #{folder}"
    imgFiles = getFiles(folder, [])
    for file in imgFiles then do (file) ->
        fs.watchFile "#{file}", (curr, prev) ->
            if +curr.mtime isnt +prev.mtime
                util.log "Saw change in #{file}"
                invoke 'cpimgs'

task 'buildAndCpAll', 'build all coffee files and copy all images', ->
  invoke 'build'
  invoke 'cpimgs'
  invoke 'cpcss'

task 'test', 'run the client and server tests', ->
  clientTest()
  
